/**
 * @file       solution2.cpp
 * @author     Andreas Vasilakis
 * @date       15/02/2019
 * @version    1.0
 * 
 * @brief      Even Fibonacci numbers
 * 
 * @scope
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 * 
 */

#include <iostream>
#include <stdio.h>
#include <cmath>
#include <assert.h>

#ifdef EXECUTION_TIME_COMPUTATION
#include <chrono> 
using namespace std::chrono; 
#endif 

int fibonacci(int n)
{
    return (n == 0 || n == 1) ? n+1 : fibonacci(n-1) + fibonacci(n-2);
}

int main (int argc, char *argv[])
{
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " n \n";
        return 1;
    }
    
    const std::string _name = std::string(argv[0]);
    const int         _n    = std::stoi(argv[1]);
    
#ifdef EXECUTION_TIME_COMPUTATION
    auto start = high_resolution_clock::now(); 
#endif
    
// Solution (naive)
    int _i   = 1;
    int _sum = 0;
    int _f   = 0;
    while(_f < _n) {
        _sum += _f;
        _f    = fibonacci(_i);
        _i += 3;
    }

    std::cout << "Solution(" << _n << "): " << _sum << std::endl;

#ifdef EXECUTION_TIME_COMPUTATION
    auto stop     = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start); 
	
	std::cout << "Time: " << duration.count() << " ms" << std::endl;
#endif


#ifdef EXECUTION_TIME_COMPUTATION
    start = high_resolution_clock::now(); 
#endif
    
// Solution (fast)
    int _a   = 1;
    int _b   = 1;
    int _c   = 2;
    _sum = 0;
    while(_c < _n) {
        _sum += _c;
        _a    = _b + _c;
        _b    = _c + _a;
        _c    = _a + _b;
    }

    std::cout << "Solution(" << _n << "): " << _sum << std::endl;

#ifdef EXECUTION_TIME_COMPUTATION
    stop     = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop - start); 
	
	std::cout << "Time: " << duration.count() << " ms" << std::endl;
#endif


    return 0;
}
